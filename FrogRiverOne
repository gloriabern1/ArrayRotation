//clean solution
function solution(A, p){
  var arrlen=A.length;
  var myset= new Set();
  
  for(var i=0; i<arrlen; i++){
    //Checks if the current element is less than the position
    if(A[i]<p){
    //Then add it to the set
      myset.add(A[i])
    }// Checking the element is equal to the position
    else if(A[i]===p){
    //Checking if the set is complete with all the numbers that come before the positino number
    //then return the index
      if(myset.size===p-1) return i;
    }

  }
  return -1;
}
console.log(solution([1,3,1,4,2,3,5,4],5))



function solution(position,myarray){

      if(myarray.includes(position)){
        
      var occurarray=  myarray.reduce(function(a, e, i){
          if(e===position)
          a.push(i);
          return a;
        }, []);
     
        for(var j=0; j<occurarray.length; j++){
    
  var newarray= myarray.slice(0, occurarray[j]+1);
            for(var i=0; i<position; i++){
                if(newarray.includes(i+1)==true) {
                if( i==(position-1)){
                   return occurarray[j] ;
                }
                }
                else{
                  break;
                }
               
            }

        }
       return -1;
  }
  else{
    return -1;
  }
}

//Another solution
function solution(position, myarray) {
  var mpv=position;
     var oca=[];
  if (myarray.includes(mpv)) {
     oca = myarray.reduce(function (a, e, i) {
      if (e === mpv) a.push(i);
      return a;
    }, []);

    var ida=[...Array(mpv+1).keys()].slice(1);
  
    var atl= oca.filter(ele=> ele>=mpv-1);
    console.log(atl);
    for (var j = 0; j < atl.length; j++) {
      var na = myarray.slice(0, atl[j] + 1);
      console.log(na);
    var ac=  ida.every(elem => na.includes(elem));
    if(ac){
      return atl[j];
    }

    }
    return -1;
  } else {
    return -1;
  }
}
console.log(solution(3, [1, 3, 1, 3, 2, 1, 3]));

