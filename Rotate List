/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} k
 * @return {ListNode}
 */
var rotateRight = function(head, k) {
    if(!head) return null;
    //if k is 0 then there is no rotation
    if(k===0) return head;
    //pointer to get the size of the linked list
    var hp= head;
    //setting the size to 1, becos we set the pointer hp to head
    var size=1;
    //loopto get the size of the linked list
    while(hp.next){
        hp=hp.next;
        size++;
    }
 //getting the actual k rotation from the size
    if(k>size) k = k%size;
    //if k is 0 then no rotation
    if(k===0)return head;
    
    //new pointer for head
    var nhp=head;
    //getting the index of the node to break away the rotated node
    var newnodeindex= size-k;
    //index count check for "newnodeindex"
    var ind=0;
    while(nhp){
        if(ind===newnodeindex-1){
            var oldhead=head;
            head=nhp.next;
            hp.next=oldhead;
            nhp.next=null;
            break;
           
        }
       nhp= nhp.next;
        
       ind++;
    }
    return head;
};
